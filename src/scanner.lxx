%option nobackup
%option never-interactive full ecs pointer nostdinit
%option 8bit default perf-report perf-report noyywrap
%option noyylineno
%option verbose
%option warn

%option batch
%option outfile="lex.yy.c"
%option prefix="fcp_yl_"

/* %option bison-bridge */

%option input
%option nounput
%option array

%{
//
// Copyright (C) 2007, 2008 Francesco Salvestrini
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License along
// with this program; if not, write to the Free Software Foundation, Inc.,
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
//

#include <stdio.h>
#include <assert.h>
#include <string.h>
#include <ctype.h>
#include <unistd.h>

#include "log.h"

#ifndef ASM_STRING_BUFFER
#define ASM_STRING_BUFFER 128
#endif /* ASM_STRING_BUFFER */

#include "parser.h"

static int line_number;
char*      string_ptr;
unsigned int i;
%}

%x STRING

SYMBOL  [a-z][a-zA-Z0-9_]*
HEX     "0"[Xx][0-9a-fA-F][0-9a-fA-F]*
OCT     "0"[Oo][0-7][0-7]*
DEC     [0-9][0-9]*

%%

[ \t]*                          {
        /* skip white-spaces */
}
\n                              {
        line_number++;
}
"#".*                           {
        /* skip comments */
        line_number++;
}

%%

int fcp_yl_init(void)
{
        dbg_printf("Setting up the scanner\n");

        dbg_printf("Allocating buffer for string handling\n");
        string_ptr = (char *) malloc(ASM_STRING_BUFFER);

        if (!string_ptr) {
                fprintf(stderr, "Could not allocate buffer\n");
                return 0;
        }

        YY_FLUSH_BUFFER;
        BEGIN(INITIAL);

        dbg_printf("Start scanning\n");
        return 1;
}

void fcp_yl_fini(void)
{
        dbg_printf("Freeing buffer\n");
        YY_FLUSH_BUFFER;
        free(string_ptr);
}
